ck naive compilation examples

naturalExpr 42

    push(w) 42

refExpr(foo)

if foo is local then

    fp                      //get frame pointer
    push <offset-to-foo>    //push the offset to local foo
    add                     //add to frame pointer
    load                    //get the thing at that address
    read_barrier?           //gc read barrier if the thing loaded was a ref?
                            //(not necessary because the thing is a root?)

if foo is not local

    fp                      //get frame pointer
    push <offset-to-env>    //offset to closures
    add                     //add to fp
    load                    //get the closures array
    push <offset-to-foo>    //push the offset to foo in closures
    add                     //add to closures pointer
    load                    //get it
    read_barrier?           //if foo is a gc ref

whileStatement

    ip                      //get current ip
    push <offset-to-cond>   //push offset to cond label (careful)
    add                     //add
    jump                    //goto cond
    
    stmt:
    <statement>             //compiled statement goes here
    
    cond:                   //label to condition
    <cond>                  //compile condition (boolean should leave 0 or not 0 on the stack)
    
    ip                      //calculate address of statement
    push <offset-to-stmt>   
    sub                     //now stack is [&stmt cond ...]
    
    swap                    //bring cond back to top [cond &stmt ...]
    
    skipz                   //consume cond and skip next instruction if cond was false
    jump                    //if cond was true then this is executed and we go back to stmt
    pop                     //if cond was false then we are here and have to remove the address of stmt
    


